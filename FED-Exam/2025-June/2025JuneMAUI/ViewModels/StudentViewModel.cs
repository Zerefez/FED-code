using System.Collections.ObjectModel;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using _2025JuneMAUI.Models;
using _2025JuneMAUI.Services;

namespace _2025JuneMAUI.ViewModels
{
    // Student management ViewModel implementing MVVM pattern for student operations
    // Inherits from BaseViewModel to leverage common functionality and error handling
    // Manages UI state and coordinates between student service and student management view
    public partial class StudentViewModel : BaseViewModel
    {
        // Private readonly fields for dependency injection of business services
        // IExamService provides exam-related operations for exam selection
        private readonly IExamService _examService;
        
        // IStudentService provides student-specific business logic and validation
        private readonly IStudentService _studentService;
        
        // IDialogService enables user interaction through dialogs and notifications
        private readonly IDialogService _dialogService;

        // Observable properties for form data binding and UI state management
        // ObservableProperty generates INotifyPropertyChanged implementation automatically
        
        // Currently selected student in the UI list for editing operations
        // Initialized with new Student() to prevent null reference in property bindings
        [ObservableProperty] private Student selectedStudent = new();
        
        // Currently selected exam to filter students and associate new students
        // Required for student operations within specific exam context
        [ObservableProperty] private Exam selectedExam = new();
        
        // Form input fields for student creation and editing
        // String properties with empty defaults prevent null reference exceptions
        [ObservableProperty] private string studentNo = string.Empty;
        [ObservableProperty] private string firstName = string.Empty;
        [ObservableProperty] private string lastName = string.Empty;
        
        // Examination order for sequence management in examination workflow
        // Default value of 1 provides sensible starting point for new students
        [ObservableProperty] private int examinationOrder = 1;

        // Constructor accepting dependencies through dependency injection pattern
        // Tuple deconstruction provides concise assignment of multiple dependencies
        public StudentViewModel(IExamService examService, IStudentService studentService, IDialogService dialogService)
        {
            // Assign injected dependencies to private readonly fields
            (_examService, _studentService, _dialogService) = (examService, studentService, dialogService);
            
            // Set ViewModel title for consistent UI display
            Title = "Administrer Studerende";
            
            // Initialize observable collections for data binding
            // Tuple assignment creates both collections in single statement
            (Students, Exams) = (new(), new());
            
            // Load exams immediately upon ViewModel construction
            // Fire-and-forget pattern using discard operator (_) for async operation
            _ = LoadExams();
        }

        // Public observable collections for UI data binding
        // ObservableCollection automatically notifies UI of collection changes
        
        // Collection of students for current selected exam
        public ObservableCollection<Student> Students { get; }
        
        // Collection of available exams for selection dropdown/picker
        public ObservableCollection<Exam> Exams { get; }

        // Partial method triggered when SelectedStudent property changes
        // Generated by ObservableProperty source generator for property change handling
        partial void OnSelectedStudentChanged(Student value) => LoadStudentToForm(value);

        // Partial method triggered when SelectedExam property changes
        // Automatically loads students when exam selection changes
        partial void OnSelectedExamChanged(Exam value)
        {
            // Only load students if valid exam is selected (ID > 0)
            // Prevents unnecessary database calls for invalid/empty selections
            if (value?.Id > 0) _ = LoadStudents();
        }

        // Relay command for loading exams from database
        // RelayCommand attribute generates ICommand implementation with proper async support
        [RelayCommand] 
        private async Task LoadExams() => await ExecuteAsync(async () =>
            // Update Exams collection with data from exam service
            // UpdateCollectionFromList provides efficient collection synchronization
            UpdateCollectionFromList(Exams, await _examService.GetAllExamsAsync()), _dialogService);

        // Relay command for loading students for currently selected exam
        // Conditional logic handles both valid exam selection and clearing scenarios
        [RelayCommand] 
        private async Task LoadStudents() => await ExecuteAsync(async () =>
        {
            // Check if valid exam is selected before loading students
            if (SelectedExam?.Id > 0) 
                // Load students for selected exam with proper ordering
                UpdateCollectionFromList(Students, await _studentService.GetStudentsForExamAsync(SelectedExam.Id));
            else
                // Clear students list if no valid exam selected
                Students.Clear();
        }, _dialogService);

        // Relay command for adding new student to selected exam
        // Includes validation, order assignment, and UI updates
        [RelayCommand] 
        private async Task AddStudent() => await ExecuteAsync(async () =>
        {
            // Validate student data before attempting creation
            // Early return pattern prevents invalid data from being processed
            if (!await _studentService.ValidateStudentDataAsync(SelectedExam?.Id ?? 0, StudentNo, FirstName, LastName)) return;
            
            // Get next available examination order for proper sequencing
            var order = await _studentService.GetNextOrderAsync(SelectedExam.Id);
            
            // Create student through service which handles business logic and validation
            var student = await _studentService.CreateStudentAsync(SelectedExam.Id, StudentNo, FirstName, LastName, order);
            
            // Add new student to UI collection for immediate display
            Students.Add(student);
            
            // Clear form fields after successful addition
            ClearForm();
        }, _dialogService);

        // Relay command for updating existing student information
        // CanExecute property provides conditional enabling based on selection state
        [RelayCommand(CanExecute = nameof(CanUpdateStudent))]
        private async Task UpdateStudent() => await ExecuteAsync(async () =>
        {
            // Validate updated student data before processing
            if (!await _studentService.ValidateStudentDataAsync(SelectedExam?.Id ?? 0, StudentNo, FirstName, LastName)) return;
            
            // Update student through service with new form values
            var updatedStudent = await _studentService.UpdateStudentAsync(SelectedStudent.Id, StudentNo, FirstName, LastName, ExaminationOrder);
            
            // Find and replace student in UI collection to reflect changes
            var index = Students.ToList().FindIndex(s => s.Id == updatedStudent.Id);
            if (index >= 0) Students[index] = updatedStudent;
            
            // Update examination order numbers for affected students
            await UpdateExaminationOrder();
        }, _dialogService);

        // Relay command for deleting student with parameter support
        // Supports both parameter-based deletion and current selection deletion
        [RelayCommand] 
        private async Task DeleteStudent(Student? studentToDelete = null) => await ExecuteAsync(async () =>
        {
            // Use provided parameter or fall back to currently selected student
            var student = studentToDelete ?? SelectedStudent;
            
            // Validate student selection and perform deletion through service
            if (student?.Id > 0 && await _studentService.DeleteStudentAsync(student.Id))
            {
                // Remove student from UI collection after successful deletion
                Students.Remove(student);
                
                // Clear form if deleted student was currently selected
                if (student == SelectedStudent) ClearForm();
                
                // Update examination order after student removal
                await UpdateExaminationOrder();
            }
        }, _dialogService);

        // Relay command for moving student up in examination order
        // Parameter-based command for direct operation on specific student
        [RelayCommand] 
        private async Task MoveStudentUp(Student student) => await ExecuteAsync(async () =>
        {
            // Find current position of student in ordered list
            var currentIndex = Students.ToList().FindIndex(s => s.Id == student.Id);
            
            // Check if student can move up (not already first)
            if (currentIndex > 0)
            {
                // Get previous student for order swapping
                var previousStudent = Students[currentIndex - 1];
                
                // Swap examination orders through service
                await _studentService.SwapStudentOrdersAsync(student.Id, previousStudent.Id);
                
                // Reload students to reflect new ordering
                await LoadStudents();
            }
        }, _dialogService);

        // Relay command for moving student down in examination order
        // Similar logic to MoveStudentUp but in opposite direction
        [RelayCommand] 
        private async Task MoveStudentDown(Student student) => await ExecuteAsync(async () =>
        {
            // Find current position of student in ordered list
            var currentIndex = Students.ToList().FindIndex(s => s.Id == student.Id);
            
            // Check if student can move down (not already last)
            if (currentIndex < Students.Count - 1)
            {
                // Get next student for order swapping
                var nextStudent = Students[currentIndex + 1];
                
                // Swap examination orders through service
                await _studentService.SwapStudentOrdersAsync(student.Id, nextStudent.Id);
                
                // Reload students to reflect new ordering
                await LoadStudents();
            }
        }, _dialogService);

        // Relay command for clearing form fields and resetting selection
        // Provides clean state for new student entry
        [RelayCommand] 
        private void ClearForm() => 
            // Tuple assignment resets all form fields in single statement
            // New Student() object prevents null reference issues in UI binding
            (SelectedStudent, StudentNo, FirstName, LastName, ExaminationOrder) = 
            (new Student(), string.Empty, string.Empty, string.Empty, 1);

        // Public method for getting exam statistics as formatted string
        // Provides summary information for UI display and reporting
        public async Task<string> GetExamStatsAsync() => 
            // Conditional expression returns statistics or message based on exam selection
            SelectedExam?.Id > 0 ? await _studentService.GetExamStatsAsync(SelectedExam.Id) : "Ingen eksamen valgt";

        // Private method determining if UpdateStudent command can execute
        // CanExecute pattern enables/disables UI elements based on selection state
        private bool CanUpdateStudent() => SelectedStudent?.Id > 0;

        // Private method for updating examination order after student changes
        // Ensures proper sequence numbering when students are added/removed
        private async Task UpdateExaminationOrder()
        {
            // Only update if valid exam is selected
            if (SelectedExam?.Id > 0) 
                // Get and set next available order number for new student entry
                ExaminationOrder = await _studentService.GetNextOrderAsync(SelectedExam.Id);
        }

        // Private method for loading selected student data into form fields
        // Tuple assignment provides concise multi-property update from student object
        private void LoadStudentToForm(Student student) => 
            (StudentNo, FirstName, LastName, ExaminationOrder) = 
            (student.StudentNo, student.FirstName, student.LastName, student.ExaminationOrder);
    }
} 