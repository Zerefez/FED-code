using System.Collections.ObjectModel;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using _2025JuneMAUI.Models;
using _2025JuneMAUI.Services;

namespace _2025JuneMAUI.ViewModels
{
    // Exam management ViewModel implementing MVVM pattern for exam operations
    // Inherits from BaseViewModel to leverage common functionality and error handling
    // Manages UI state and coordinates between exam service and exam management view
    public partial class ExamViewModel : BaseViewModel
    {
        // Private readonly field for exam service dependency injection
        // IExamService provides exam-specific business logic and validation
        private readonly IExamService _examService;

        // Observable properties for form data binding and UI state management
        // ObservableProperty generates INotifyPropertyChanged implementation automatically
        
        // Currently selected exam in the UI list for editing operations
        // Initialized with new Exam() to prevent null reference in property bindings
        [ObservableProperty] private Exam selectedExam = new();
        
        // Form input fields for exam creation and editing
        // String properties with empty defaults prevent null reference exceptions
        [ObservableProperty] private string examTermin = string.Empty;
        [ObservableProperty] private string courseName = string.Empty;
        
        // Date property using DateTime for proper date handling and picker binding
        // Default to today's date provides sensible starting point for new exams
        [ObservableProperty] private DateTime date = DateTime.Today;
        
        // Number of questions available for random selection during examination
        // Default value of 10 provides reasonable starting point for most exams
        [ObservableProperty] private int numberOfQuestions = 10;
        
        // Duration in minutes for each student's examination
        // Default value of 15 minutes suitable for typical oral examinations
        [ObservableProperty] private int examDurationMinutes = 15;
        
        // Start time of examination session as string for flexible time input
        // Default "09:00" represents common morning start time for academic examinations
        [ObservableProperty] private string startTime = "09:00";

        // Constructor accepting exam service dependency through dependency injection
        // Single parameter pattern keeps constructor focused and maintainable
        public ExamViewModel(IExamService examService)
        {
            // Assign injected exam service to private readonly field
            _examService = examService;
            
            // Set ViewModel title for consistent UI display across navigation
            Title = "Opret Eksamen";
            
            // Initialize observable collection for exam data binding
            // ObservableCollection automatically notifies UI of collection changes
            Exams = new ObservableCollection<Exam>();
            
            // Load exams immediately upon ViewModel construction
            // Fire-and-forget pattern using discard operator (_) for async operation
            _ = LoadExams();
        }

        // Public observable collection for UI data binding
        // Exposes read-only collection interface while maintaining internal ObservableCollection
        public ObservableCollection<Exam> Exams { get; }

        // Partial method triggered when SelectedExam property changes
        // Generated by ObservableProperty source generator for property change handling
        // Automatically loads exam data into form when selection changes
        partial void OnSelectedExamChanged(Exam value) => LoadExamToForm(value);

        // Relay command for loading exams from database
        // RelayCommand attribute generates ICommand implementation with proper async support
        [RelayCommand] 
        private async Task LoadExams() => await ExecuteAsync(async () =>
            // Update Exams collection with data from exam service
            // UpdateCollectionFromList provides efficient collection synchronization
            UpdateCollectionFromList(Exams, await _examService.GetAllExamsAsync()));

        // Relay command for adding new exam to database
        // Includes validation through service layer and UI collection updates
        [RelayCommand] 
        private async Task AddExam() => await ExecuteAsync(async () =>
        {
            // Create exam through service which handles validation and business logic
            // Date.ToString converts DateTime to string format for database storage
            var exam = await _examService.CreateExamAsync(ExamTermin, CourseName, Date.ToString("yyyy-MM-dd"), NumberOfQuestions, ExamDurationMinutes, StartTime);
            
            // Insert new exam at beginning of collection for immediate visibility
            // Insert(0, item) places new exam at top of list for user convenience
            Exams.Insert(0, exam);
            
            // Clear form fields after successful addition to prepare for next entry
            ClearForm();
        });

        // Relay command for updating existing exam with validation
        // CanExecute property provides conditional enabling based on selection state
        [RelayCommand(CanExecute = nameof(CanUpdateExam))]
        private async Task UpdateExam() => await ExecuteAsync(async () =>
        {
            // Update exam through service with current form values
            // Service handles validation and business logic for update operation
            var updatedExam = await _examService.UpdateExamAsync(SelectedExam.Id, ExamTermin, CourseName, Date.ToString("yyyy-MM-dd"), NumberOfQuestions, ExamDurationMinutes, StartTime);
            
            // Find and replace exam in UI collection to reflect changes
            // ToList() conversion enables FindIndex operation on ObservableCollection
            var index = Exams.ToList().FindIndex(e => e.Id == updatedExam.Id);
            if (index >= 0) Exams[index] = updatedExam;
        });

        // Relay command for deleting exam with parameter support
        // Supports both parameter-based deletion and current selection deletion
        [RelayCommand] 
        private async Task DeleteExam(Exam? examToDelete = null) => await ExecuteAsync(async () =>
        {
            // Use provided parameter or fall back to currently selected exam
            // Null coalescing provides fallback to SelectedExam when no parameter provided
            var exam = examToDelete ?? SelectedExam;
            
            // Validate exam selection and perform deletion through service
            // Service handles confirmation dialogs and cascading deletion logic
            if (exam?.Id > 0 && await _examService.DeleteExamAsync(exam.Id))
            {
                // Remove exam from UI collection after successful deletion
                Exams.Remove(exam);
                
                // Clear form if deleted exam was currently selected
                // Prevents form showing deleted exam data
                if (exam == SelectedExam) ClearForm();
            }
        });

        // Relay command for clearing form fields and resetting selection
        // Provides clean state for new exam entry
        [RelayCommand] 
        private void ClearForm() => 
            // Tuple assignment resets all form fields in single statement
            // Provides fresh state with sensible defaults for new exam creation
            (SelectedExam, ExamTermin, CourseName, Date, NumberOfQuestions, ExamDurationMinutes, StartTime) = 
            (new Exam(), string.Empty, string.Empty, DateTime.Today, 10, 15, "09:00");

        // Private method determining if UpdateExam command can execute
        // CanExecute pattern enables/disables UI elements based on selection state
        // Ensures update operations only occur when valid exam is selected
        private bool CanUpdateExam() => SelectedExam?.Id > 0;

        // Private method for loading selected exam data into form fields
        // Tuple assignment provides concise multi-property update from exam object
        // DateTime.TryParse handles potential date conversion failures gracefully
        private void LoadExamToForm(Exam exam) => 
            (ExamTermin, CourseName, Date, NumberOfQuestions, ExamDurationMinutes, StartTime) = 
            (exam.ExamTermin, exam.CourseName, DateTime.TryParse(exam.Date, out var parsedDate) ? parsedDate : DateTime.Today, exam.NumberOfQuestions, exam.ExamDurationMinutes, exam.StartTime);
    }
} 