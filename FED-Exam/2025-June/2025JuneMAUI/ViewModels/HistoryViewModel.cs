using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using _2025JuneMAUI.Models;
using _2025JuneMAUI.Services;
using System.Collections.ObjectModel;

namespace _2025JuneMAUI.ViewModels
{
    // History view model for displaying examination results and statistics
    // Inherits from BaseViewModel to leverage common functionality and error handling
    // Provides read-only view of completed examinations and grade analysis
    public partial class HistoryViewModel : BaseViewModel
    {
        // Private readonly fields for dependency injection of business services
        // IExamService provides exam-related operations for exam selection
        private readonly IExamService _examService;
        
        // IStudentService provides student data and grade calculation functionality
        private readonly IStudentService _studentService;

        // Observable properties for UI data binding and display state management
        // ObservableProperty generates INotifyPropertyChanged implementation automatically
        
        // Currently selected exam for viewing historical data
        // Nullable to handle cases where no exam is selected
        [ObservableProperty] private Exam? selectedExam;
        
        // Formatted summary text containing exam details and statistics
        // Empty default prevents null reference in text binding scenarios
        [ObservableProperty] private string examSummary = string.Empty;
        
        // Calculated average grade for display in summary section
        // String type accommodates Danish grading system representation
        [ObservableProperty] private string averageGrade = string.Empty;
        
        // Boolean flag controlling visibility of student list section
        // Enables conditional UI display based on data availability
        [ObservableProperty] private bool showStudentList;
        
        // Boolean flag controlling visibility of no-data message section
        // Provides user feedback when no historical data is available
        [ObservableProperty] private bool showNoDataMessage;
        
        // Message text displayed when no historical data is found
        // Contextual message helps user understand empty state
        [ObservableProperty] private string noDataMessage = string.Empty;

        // Constructor accepting service dependencies through dependency injection
        // Tuple deconstruction provides concise assignment of multiple dependencies
        public HistoryViewModel(IExamService examService, IStudentService studentService)
        {
            // Assign injected dependencies to private readonly fields
            (_examService, _studentService) = (examService, studentService);
            
            // Set ViewModel title for consistent UI display across navigation
            Title = "Historik";
            
            // Initialize observable collections for data binding
            // Tuple assignment creates both collections in single statement
            (Exams, Students) = (new(), new());
            
            // Load exams immediately upon ViewModel construction
            // Fire-and-forget pattern using discard operator (_) for async operation
            _ = LoadExams();
        }

        // Public observable collections for UI data binding
        // ObservableCollection automatically notifies UI of collection changes
        
        // Collection of available exams for selection dropdown/picker
        public ObservableCollection<Exam> Exams { get; }
        
        // Collection of students who completed the selected exam
        public ObservableCollection<Student> Students { get; }

        // Partial method triggered when SelectedExam property changes
        // Generated by ObservableProperty source generator for property change handling
        // Automatically loads exam history when selection changes
        partial void OnSelectedExamChanged(Exam? value) 
        {
            // Only load history if valid exam is selected (ID > 0)
            // Fire-and-forget pattern for async operation without blocking UI
            if (value?.Id > 0) _ = LoadExamHistory(value);
        }

        // Relay command for loading available exams from database
        // RelayCommand attribute generates ICommand implementation with proper async support
        [RelayCommand] 
        private async Task LoadExams() => await ExecuteAsync(async () =>
            // Update Exams collection with data from exam service
            // UpdateCollectionFromList provides efficient collection synchronization
            UpdateCollectionFromList(Exams, await _examService.GetAllExamsAsync()));

        // Relay command for loading historical data for specific exam
        // Processes completed students and generates summary statistics
        [RelayCommand] 
        private async Task LoadExamHistory(Exam exam) => await ExecuteAsync(async () =>
        {
            // Get all students registered for the exam (completed and incomplete)
            var allStudents = await _studentService.GetStudentsForExamAsync(exam.Id);
            
            // Filter to include only students who completed the exam (have grades)
            var completedStudents = allStudents.Where(s => !string.IsNullOrEmpty(s.Grade)).ToList();
            
            // Check if any students completed the exam
            if (!completedStudents.Any()) 
            { 
                // Show no data state with informative message for user
                ShowNoDataState("Ingen gennemførte eksamener fundet for denne eksamen."); 
                return; 
            }
            
            // Update UI collection with completed students for display
            UpdateCollectionFromList(Students, completedStudents);
            
            // Generate comprehensive exam summary with statistics
            ExamSummary = CreateExamSummary(exam, allStudents, completedStudents);
            
            // Calculate and display average grade using grade calculation service
            AverageGrade = GradeCalculationService.CalculateAverageGrade(completedStudents);
            
            // Show student list and hide no-data message
            // Tuple assignment provides concise state update
            (ShowStudentList, ShowNoDataMessage) = (true, false);
        });

        // Relay command for refreshing all data (exams and current exam history)
        // Provides user-initiated data refresh functionality
        [RelayCommand] 
        private async Task RefreshData()
        {
            // Reload exam list first to capture any new exams
            await LoadExams();
            
            // Reload history for currently selected exam if one is selected
            if (SelectedExam?.Id > 0) await LoadExamHistory(SelectedExam);
        }

        // Private method for resetting all display states to default
        // Centralizes display state management for consistency
        private void ResetDisplay() => (ShowStudentList, ShowNoDataMessage) = (false, false);

        // Private method for showing no-data state with custom message
        // Provides consistent no-data display pattern throughout ViewModel
        private void ShowNoDataState(string message)
        {
            // Reset display to clear any existing content
            ResetDisplay();
            
            // Set message and enable no-data display
            // Tuple assignment provides concise state update
            (NoDataMessage, ShowNoDataMessage) = (message, true);
        }

        // Private method for creating formatted exam summary text
        // Consolidates exam information, statistics, and grade distribution
        private string CreateExamSummary(Exam exam, List<Student> all, List<Student> completed)
        {
            // Get grade distribution statistics for completed students
            var gradeDistribution = GradeCalculationService.GetGradeDistribution(completed);
            
            // Format grade distribution as readable text
            // Filters out grades with zero count and formats as "Grade: Count students"
            var distributionText = string.Join("\n", gradeDistribution.Where(kvp => kvp.Value > 0).Select(kvp => $"  {kvp.Key}: {kvp.Value} studerende"));
            
            // Calculate average grade for summary display
            var calculatedAverage = GradeCalculationService.CalculateAverageGrade(completed);
            
            // Return formatted summary using raw string literals for clean multiline formatting
            return $"""
                {exam.CourseName}
                Eksamenstermin: {exam.ExamTermin}
                Dato: {exam.Date}
                Tid: {exam.StartTime}
                
                Status: {completed.Count}/{all.Count} gennemført
                Gennemsnitskarakter: {calculatedAverage}
                
                Karakterfordeling:
                {distributionText}
                """;
        }

        // Private async execution wrapper with simplified error handling
        // Provides basic error handling specific to history viewing scenarios
        private async Task ExecuteAsync(Func<Task> operation)
        {
            // Prevent concurrent operations by checking busy state
            if (IsBusy) return;
            
            try 
            { 
                // Set busy state and execute operation
                IsBusy = true; 
                await operation(); 
            }
            catch 
            { 
                // Show generic error message for any operation failures
                // Simplified error handling for read-only history operations
                ShowNoDataState("Der opstod en fejl ved indlæsning af data."); 
            }
            finally 
            { 
                // Always reset busy state to restore UI responsiveness
                IsBusy = false; 
            }
        }
    }
} 